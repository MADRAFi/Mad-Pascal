// PETSCII codes
  PETSCII_SWAP_COLOR		      = $01;
  PETSCII_CLEAR	        		  = $93;
  PETSCII_BELL		            = $07;
  PETSCII_REVERSE_ON	        = $12;
  PETSCII_REVERSE_OFF	        = $92;
  PETSCII_ISO_ON	            = $0f;
  PETSCII_ISO_OFF	            = $8f;
  PETSCII_SWAP_LOWCHARSET     = $0e;
  PETSCII_SWAP_GFXCHARSET     = $8e;

  PETSCII_CURSOR_UP	          = $91;
  PETSCII_CURSOR_DOWN	        = $11;
  PETSCII_CURSOR_RIGHT        = $1d;
  PETSCII_CURSOR_LEFT         = $9d;
  PETSCII_KEY_ESCAPE	        = $1b;
  PETSCII_KEY_BACKSPACE	      = $14;
  PETSCII_KEY_DEL	            = $19;
  PETSCII_KEY_RETURN	        = $0d;
  PETSCII_KEY_SHIFT_RETURN	  = $8d;
  PETSCII_KEY_TAB	            = $09;
  PETSCII_KEY_SHIFT_TAB	      = $18;
  PETSCII_KEY_MENU	          = $06;
  PETSCII_KEY_HOME	          = $13;
  PETSCII_KEY_INSERT	        = $94;
  PETSCII_KEY_END	            = $04;
  PETSCII_KEY_HELP	          = $84;

  PETSCII_KEY_PAGEUP	        = $82;
  PETSCII_KEY_PAGEDOWN	      = $02;
  PETSCII_KEY_F1	            = $85;
  PETSCII_KEY_F2	            = $89;
  PETSCII_KEY_F3	            = $86;
  PETSCII_KEY_F4	            = $8a;
  PETSCII_KEY_F5	            = $87;
  PETSCII_KEY_F6	            = $8b;
  PETSCII_KEY_F7	            = $88;
  PETSCII_KEY_F8	            = $8c;
  PETSCII_KEY_F9	            = $10;
  PETSCII_KEY_F10	            = $15;
  PETSCII_KEY_F11	            = $16;
  PETSCII_KEY_F12	            = $17;

  PETSCII_COLOR_WHITE	        = $05;
  PETSCII_COLOR_RED           = $1c;
  PETSCII_COLOR_GREEN	        = $1e;
  PETSCII_COLOR_BLUE	        = $1f;
  PETSCII_COLOR_ORANGE	      = $81;
  PETSCII_COLOR_BLACK	        = $90;
  PETSCII_COLOR_BROWN	        = $95;
  PETSCII_COLOR_PINK	        = $96;
  PETSCII_COLOR_DARK_GREY	    = $97;
  PETSCII_COLOR_GREY	        = $98;
  PETSCII_COLOR_LIGHT_GREEN 	= $99;
  PETSCII_COLOR_LIGHT_BLUE	  = $9a;
  PETSCII_COLOR_LIGHT_GREY	  = $9b;
  PETSCII_COLOR_PURPLE	      = $9c;
  PETSCII_COLOR_YELLOW	      = $9e;
  PETSCII_COLOR_CYAN	        = $9f;

  ACPTR      = $ffa5; // ACPTR. Read byte from peripheral bus.
  BASIN	     = $ffcf; // Get character.
  BSAVE      = $feba; // Like SAVE but omits the 2-byte header.
  BSOUT	     = $ffd2; // Write byte in A to default output. For writing to a file must call OPEN and CHKOUT beforehand.
  CIOUT	     = $ffa8; // Send byte to peripheral bus.
  CLOSEALLCH = $ffe7; // CLALL. Close all channels.
  CLOSECH	   = $ffc3; // CLOSE. Close a channel.
  CHKIN      = $ffc6; // Set channel for character input.
  CHKOUT     = $ffc9; // CHKOUT. Define file as default output. (Must call OPEN beforehand.)
  CHRIN      = $ffcf; // Alias for BASIN.
  CHROUT     = $ffd2; // Alias for BSOUT.
  CLOSE_ALL  = $ff4a; // Close all files on a device.
  CLRCHN     = $ffcc; // Restore character I/O to screen/keyboard.
  GETIN      = $ffe4; // Get character from keyboard.

  IECIN      = $ffa5; // IECIN. Read byte from serial bus. (Must call TALK and TALKSA beforehand.)
  IECOUT     = $ffa8; // IECOUT. Write byte to serial bus. (Must call LISTEN and LSTNSA beforehand.)
  IOBASE     = $fff3; // Return start of I/O area.
  IOINIT     = $ff84; // IOINIT. Initialize CIA's, SID volume; setup memory configuration; set and start interrupt timer.
  LISTEN     = $ffb1; // Send LISTEN command to serial bus.
  LKUPLA     = $ff59; // Search tables for given LA.
  LKUPSA     = $ff5c; // Search tables for given SA.
  LOAD       = $ffd5; // LOAD. Load or verify file. (Must call SETLFS and SETNAM beforehand.)
  LSTNSA     = $ff93; // LSTNSA. Send LISTEN secondary address to serial bus. (Must call LISTEN beforehand.)
  MEMBOT     = $ff99; // MEMBOT. Save or restore start address of BASIC work area.
  MEMTOP     = $ff9c; // MEMTOP. Save or restore end address of BASIC work area.
  OPEN       = $ffc0; // OPEN. Open file. (Must call SETLFS and SETNAM beforehand.)
  PLOT       = $fff0; // PLOT. Save or restore cursor position.
  PRIMM      = $ff7d; // Print string following the callerâ€™s code.

  RAMTAS     = $ff87; // RAMTAS. Clear memory addresses $0002-$0101 and $0200-$03FF; run memory test and set start and end address of BASIC work area accordingly; set screen memory to $0400 and datasette buffer to $033C.
  RDTIM      = $ffde; // RDTIM. read Time of Day, at memory address $00A0-$00A2.
  READST     = $ffb7; // READST. Fetch status of current input/output device, value of ST variable. (For RS232, status is cleared.)
  RESTOR     = $ff8a; // RESTOR. Fill vector table at memory addresses $0314-$0333 with default values.
  SAVE       = $ffd8; // SAVE. Save file. (Must call SETLFS and SETNAM beforehand.)
  SCINIT     = $ff81; // SCINIT. Initialize VIC; restore default input/output to keyboard/screen; clear screen; set PAL/NTSC switch and interrupt timer.
  SCNKEY     = $ff9f; // SCNKEY. Query keyboard; put current matrix code into memory address $00CB, current status of shift keys into memory address $028D and PETSCII code into keyboard buffer.
  SCREEN     = $ffed; // SCREEN. Fetch number of screen rows and columns.

  SETLFS     = $ffba; // SETLFS. Set file parameters.
  SETMSG     = $ff90; // SETMSG. Set system error display switch at memory address $009D.
  SETNAM     = $ffbd; // SETNAM. Set file name parameters.
  SETTIM     = $ffdb; // SETTIM. Set Time of Day, at memory address $00A0-$00A2.
  SETTMO     = $ffa2; // SETTMO. Unknown. (Set serial bus timeout.)
  STOP       = $ffe1; // STOP. Query Stop key indicator, at memory address $0091; if pressed, call CLRCHN and clear keyboard buffer.
  TALK       = $ffb4; // TALK. Send TALK command to serial bus.
  TALKSA     = $ff96; // TALKSA. Send TALK secondary address to serial bus. (Must call TALK beforehand.)
  UDTIM      = $ffea; // UDTIM. Update Time of Day, at memory address $00A0-$00A2, and Stop key indicator, at memory address $0091.
  UNLSTN     = $ffae; // UNLSTN. Send UNLISTEN command to serial bus.
  UNTALK     = $ffab; // UNTALK. Send UNTALK command to serial bus.
  VECTOR     = $ff8d; // VECTOR. Copy vector table at memory addresses $0314-$0333 from or into user table.

// x16 specific routines
  clock_get_date_time    = $ff50; // Get the date and time.
  clock_set_date_time    = $ff4d; //	Set the date and time.
  entropy_get            = $fecf; // Get 24 random bits.
  enter_basic            = $ff47; // Enter BASIC.
  screen_mode            = $ff5f; // Get/Set screen mode.
  screen_set_charset     = $ff62; // Activate 8x8 text mode charset.
  JSRFAR_kernal_addr     = $FF6E;

  
// Graphics routines
  MEMORY_FILL               = $FEE4
  MEMORY_COPY               = $FEE7
  MEMORY_CRC                = $FEEA
  MEMORY_DECOMPRESS         = $FEED
  SPRITE_set_image          = $FEF0
  SPRITE_set_position       = $FEF3
  FB_init                   = $FEF6
  FB_get_info               = $FEF9
  FB_set_palette            = $FEFC
  FB_cursor_position        = $FEFF
  FB_cursor_next_line       = $FF02
  FB_get_pixel              = $FF05
  FB_get_pixels             = $FF08
  FB_set_pixel              = $FF0B
  FB_set_pixels             = $FF0E
  FB_set_8_pixels           = $FF11
  FB_set_8_pixels_opaque    = $FF14
  FB_fill_pixels            = $FF17
  FB_filter_pixels          = $FF1A
  FB_move_pixels            = $FF1D
  GRAPH_init            = $ff20; // Initialize graphics.
  GRAPH_clear           = $ff23; // Clear screen.
  GRAPH_set_window      = $ff26; // Set clipping region.
  GRPAH_set_colors      = $ff29; // Set stroke, fill and background colors.
  GRAPH_draw_line       = $ff2c; // Draw a line.
  GRAPH_draw_rect       = $ff2f; // Draw a rectangle (optionally filled).
  GRAPH_move_rect       = $ff32; // Move pixels.
  GRAPH_draw_oval       = $ff35; // Draw an oval or circle.
  GRAPH_draw_image      = $ff38; // Draw an image.
  GRAPH_set_font        = $ff3b; // Set the current font.
  GRAPH_get_char_size   = $ff3e; // Get the size of a character.
  GRAPH_put_char        = $ff41; // Draw a character.

// floating point routines
  MOVFM      = $bba2; // MOVFM. Move a Floating Point Number from Memory to FAC1
  FOUT       = $bddd; // FOUT. Convert Contents of FAC1 to ASCII String
  MOV2F      = $bbc7; // MOV2F. Move a Floating Point Number from FAC1 to Memory

// interrupt routines and vectors
  ; IRQVECLO   = $0314; // hardware interrupt (IRQ) vector, low byte
  ; IRQVECHI   = $0315; // hardware interrupt (IRQ) vector, high byte  
  IRQVec       = $0314; // hardware interrupt (IRQ) vector, low byte
  BRKVec       = $0316 
  NMIVec       = $0318
  FETVec       = $03AF
  ;STAVec      = TBD
  ;CMPVec      = TBD
  ; STDIRQ     = $ea31; //start address of standard interrupt routines

  ; I/O Registers
  VERA_addr_low     = $9F20
  VERA_addr_high    = $9F21
  VERA_addr_bank    = $9F22
  VERA_data0        = $9F23
  VERA_data1        = $9F24
  VERA_ctrl         = $9F25
  VERA_ien          = $9F26
  VERA_isr          = $9F27
  VERA_irqline_l    = $9F28
  VERA_dc_video     = $9F29 ; VERA_ctrl(1) (DCSEL) = 0
  VERA_dc_hscale    = $9F2A ; VERA_ctrl(1) (DCSEL) = 0
  VERA_dc_vscale    = $9F2B ; VERA_ctrl(1) (DCSEL) = 0
  VERA_dc_border    = $9F2C ; VERA_ctrl(1) (DCSEL) = 0
  VERA_dc_hstart    = $9F29 ; VERA_ctrl(1) (DCSEL) = 1
  VERA_dc_hstop     = $9F2A ; VERA_ctrl(1) (DCSEL) = 1
  VERA_dc_vsstart   = $9F2B ; VERA_ctrl(1) (DCSEL) = 1
  VERA_dc_vstop     = $9F2C ; VERA_ctrl(1) (DCSEL) = 1
  VERA_L0_config    = $9F2D
  VERA_L0_mapbase   = $9F2E
  VERA_L0_tilebase  = $9F2F
  VERA_L0_hscroll_l = $9F30
  VERA_L0_hscroll_h = $9F31
  VERA_L0_vscroll_l = $9F32
  VERA_L0_vscroll_h = $9F33
  VERA_L1_config    = $9F34
  VERA_L1_mapbase   = $9F35
  VERA_L1_tilebase  = $9F36
  VERA_L1_hscroll_l = $9F37
  VERA_L1_hscroll_h = $9F38
  VERA_L1_vscroll_l = $9F39
  VERA_L1_vscroll_h = $9F3A
  VERA_audio_ctrl   = $9F3B
  VERA_audio_rate   = $9F3C
  VERA_audio_data   = $9F3D
  VERA_spi_data     = $9F3E
  VERA_spi_ctrl     = $9F3F




// Zero page registers
// arguments(saved)
  R0L        = $02; // virtual 16 bit register r0
  R0H        = $03; // virtual 16 bit register r0
  R1L        = $04; // virtual 16 bit register r1
  R1H        = $05; // virtual 16 bit register r1
  R2L        = $06; // virtual 16 bit register r2
  R2H        = $07; // virtual 16 bit register r2
  R3L        = $08; // virtual 16 bit register r3
  R3H        = $09; // virtual 16 bit register r3
  R4L        = $0a; // virtual 16 bit register r4
  R4H        = $0b; // virtual 16 bit register r4
  R5L        = $0c; // virtual 16 bit register r5
  R5H        = $0d; // virtual 16 bit register r5
  
// saved registers
  R6L        = $0e; // virtual 16 bit register r6
  R6H        = $0f; // virtual 16 bit register r6
  R7L        = $10; // virtual 16 bit register r7
  R7H        = $11; // virtual 16 bit register r7
  R8L        = $12; // virtual 16 bit register r8
  R8H        = $13; // virtual 16 bit register r8
  R9L        = $14; // virtual 16 bit register r9
  R9H        = $15; // virtual 16 bit register r9
  R10L       = $16; // virtual 16 bit register r10
  R10H       = $17; // virtual 16 bit register r10

// scratch registers
  R11L       = $18; // virtual 16 bit register r11 // WARRING! there is MP stack on this target...
  R11H       = $19; // virtual 16 bit register r11
  R12L       = $1A; // virtual 16 bit register r12
  R12H       = $1B; // virtual 16 bit register r12
  R13L       = $1C; // virtual 16 bit register r13
  R13H       = $1D; // virtual 16 bit register r13
  R14L       = $1E; // virtual 16 bit register r14
  R14H       = $1F; // virtual 16 bit register r14
  R15L       = $20; // virtual 16 bit register r15
  R15H       = $21; // virtual 16 bit register r15
  

// keyboard
  CURRKEY    = $cb;


  ; ROM Banks
  KERNAL_ROM_BANK   = 0
  KEYBOARD_ROM_BANK = 1
  CBDOS_ROM_BANK    = 2
  GEOS_ROM_BANK     = 3
  BASIC_ROM_BANK    = 4
  MONITOR_ROM_BANK  = 5
  CHARSET_ROM_BANK  = 6

  ; Banked Addresses
  RAM_WIN           = $A000
  RAM_WIN_SIZE      = $2000
  ROM_WIN           = $C000

.macro	basic_start(addr)

	.word upstartEnd	// link address
	.word 10		// line num
	.byte $9e		// sys

	?a=0
	?b=0
	?c=0
	?d=0
	?e=0

	?v = %%addr

	ift ?v>=10000
	?a=?v/10000
	?v=?v-(?a*10000)
	eif

	ift ?v>=1000
	?b=?v/1000
	?v=?v-(?b*1000)
	eif

	ift ?v>=100
	?c=?v/100
	?v=?v-(?c*100)
	eif

	ift ?v>=10
	?d=?v/10
	?v=?v-(?d*10)
	eif

	?e=?v%10

	dta ?a+$30,?b+$30,?c+$30,?d+$30,?e+$30

	.byte 0
upstartEnd
	.word 0			// empty link signals the end of the program

.endm

.macro VERA_SET_ADDR addr, stride
   .ifnblank stride
      .if stride < 0
         lda #((^addr) | $08 | ((0-stride) << 4))
      .else
         lda #((^addr) | (stride << 4))
      .endif
   .else
      lda #(^addr) | $10
   .endif

   sta VERA_addr_bank
   lda #(>addr)
   sta VERA_addr_high
   lda #(<addr)
   sta VERA_addr_low
.endm

.macro JSRFAR far_sr_addr, bank
	jsr JSRFAR_kernal_addr
	.addr far_sr_addr
	.byte bank
.endm
